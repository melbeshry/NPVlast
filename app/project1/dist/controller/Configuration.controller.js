sap.ui.define(["sap/ui/core/mvc/Controller","sap/ui/model/json/JSONModel","sap/m/Column","sap/m/Text","sap/m/Input","sap/m/MessageToast","sap/ui/model/type/String","sap/m/MessageBox"],function(e,t,a,r,i,o,n,s){"use strict";return e.extend("project1.controller.Configuration",{MAX_PERIODS:20,FIXED_ROWS:["downpayment","delivery"],onInit:function(){this._isSaving=false;this._hasUnsavedChanges=false;this._initialDataSnapshot=null;this._lastSaveTime=0;var e=new t({frequency:"Annual",project:{projectId:"MQR"}});this.getView().setModel(e,"config");this._initializeDataModel();this._createPeriodTable();this._loadDataFromBackend();setTimeout(function(){this._createInitialSnapshot();this._setupChangeTracking()}.bind(this),1e3)},_initializeDataModel:function(){var e=[];var a=this.FIXED_ROWS.map(e=>({rel_period:e}));for(let t=1;t<=this.MAX_PERIODS;t++){let r=t+"YP";e.push({header:r,key:r});a.push({rel_period:r})}a.forEach(t=>{t.cells={};e.forEach(e=>{t.cells[e.key]=""})});var r=new t({columns:e,rows:a});this.getView().setModel(r,"periods")},_createInitialSnapshot:function(){var e=this.getView().getModel("periods");var t=this.getView().getModel("config");this._initialDataSnapshot={config:JSON.parse(JSON.stringify(t.getData())),periods:JSON.parse(JSON.stringify(e.getData()))};console.log("Initial data snapshot created")},_setupChangeTracking:function(){var e=this.getView().getModel("periods");var t=this.getView().getModel("config");e.attachPropertyChange(function(){this._hasUnsavedChanges=true;this._updateSaveButtonState()}.bind(this));t.attachPropertyChange(function(){this._hasUnsavedChanges=true;this._updateSaveButtonState()}.bind(this))},_updateSaveButtonState:function(){var e=this.byId("saveButton");if(e){e.setEnabled(this._hasUnsavedChanges&&!this._isSaving);e.setText(this._isSaving?"Saving...":"Save")}},_hasDataChanged:function(){if(!this._initialDataSnapshot){return false}var e=this.getView().getModel("periods");var t=this.getView().getModel("config");var a={config:t.getData(),periods:e.getData()};if(a.config.frequency!==this._initialDataSnapshot.config.frequency){return true}if(a.config.project.projectId!==this._initialDataSnapshot.config.project.projectId){return true}var r=a.periods.rows;var i=this._initialDataSnapshot.periods.rows;for(var o=0;o<r.length;o++){var n=r[o].cells;var s=i[o].cells;for(var l in n){if(n[l]!==s[l]){return true}}}return false},_hasValidData:function(){var e=this.getView().getModel("periods");var t=e.getProperty("/rows");var a=e.getProperty("/columns");for(var r=0;r<t.length;r++){for(var i=0;i<a.length;i++){var o=t[r].cells[a[i].key];if(o&&o.trim()!==""){return true}}}return false},_preventRapidClicks:function(){var e=Date.now();if(e-this._lastSaveTime<2e3){o.show("Please wait before saving again");return true}this._lastSaveTime=e;return false},_loadDataFromBackend:function(){var e=this.getOwnerComponent().getModel("npvModel");var t=this.getView().getModel("config");var a=this.getView().getModel("periods");var r=t.getProperty("/project/projectId");if(!e){console.warn("OData model 'npvModel' not available");return}this._initializeDataModel();this._createPeriodTable();setTimeout(function(){var a=e.bindList("/Configurations",null,null,[new sap.ui.model.Filter("project/projectId",sap.ui.model.FilterOperator.EQ,r)],{$expand:"periods"});a.requestContexts().then(function(e){if(e.length>0){var a=e[0].getObject();if(a.frequency){t.setProperty("/frequency",a.frequency)}this._updateModelWithLoadedData(a.periods?a.periods:[]);this._createPeriodTable()}else{t.setProperty("/frequency","Annual");this._initializeDataModel();this._createPeriodTable()}}.bind(this)).catch(function(e){console.error("Error loading data:",e);t.setProperty("/frequency","Annual");this._initializeDataModel();this._createPeriodTable()}.bind(this))}.bind(this),500)},_updateModelWithLoadedData:function(e){var t=this.getView().getModel("periods");var a=t.getProperty("/rows");e.forEach(function(e){var t=a.find(t=>t.rel_period===e.rel_period);if(t&&e.orig_period in t.cells){t.cells[e.orig_period]=e.value!==null?e.value.toString():""}});t.setProperty("/rows",a)},_createPeriodTable:function(){var e=this.byId("periodsTable");e.destroyColumns();e.unbindItems();e.addColumn(new a({header:new r({text:"Period"}),width:"150px"}));var t=this.getView().getModel("periods").getProperty("/columns");t.forEach(t=>{e.addColumn(new a({header:new r({text:t.header}),width:"100px"}))});e.bindItems({path:"periods>/rows",factory:function(e,t){var a=t.getObject();var o=a.rel_period;var s=this.getView().getModel("periods").getProperty("/rows").indexOf(a);var l=this.getView().getModel("periods").getProperty("/columns");var d=[new r({text:o})];l.forEach(e=>{var t=parseInt(e.key.replace("YP",""),10);var a=this.FIXED_ROWS.length+(s-this.FIXED_ROWS.length);if(s<this.FIXED_ROWS.length||a<=t+1){d.push(new i({value:{path:`periods>cells/${e.key}`,type:new n},liveChange:this._onCellChange.bind(this,e.key),type:"Number",placeholder:"0-100"}))}else{d.push(new r({text:""}))}});return new sap.m.ColumnListItem({cells:d})}.bind(this)})},_onCellChange:function(e,t){var a=t.getSource();var r=a.getValue().trim();var i=a.getBindingContext("periods");if(r===""){i.getModel().setProperty(i.getPath()+"/cells/"+e,"");this._hasUnsavedChanges=true;this._updateSaveButtonState();return}var n=parseFloat(r);if(isNaN(n)||n<0||n>100){a.setValueState("Error");a.setValueStateText("Please enter a valid number between 0 and 100.");o.show("Please enter a valid number between 0 and 100.")}else{a.setValueState("None");i.getModel().setProperty(i.getPath()+"/cells/"+e,n.toString());this._hasUnsavedChanges=true;this._updateSaveButtonState()}},onSave:function(){if(this._isSaving){o.show("Save operation is already in progress");return}if(this._preventRapidClicks()){return}if(!this._hasDataChanged()){s.information("No changes detected. Please modify the configuration before saving.",{title:"No Changes"});return}if(!this._hasValidData()){s.warning("Please enter at least one percentage value before saving.",{title:"No Data Entered"});return}this._isSaving=true;this._hasUnsavedChanges=false;this._updateSaveButtonState();var e=this.getView().getModel("periods");var t=this.getView().getModel("config");if(!e||!t){console.error("Required models not found.");this._resetSaveState();return}var a=e.getProperty("/rows");var r=e.getProperty("/rows");var i=false;var n=e.getProperty("/columns").map(e=>e.key);n.forEach(function(e){var t=[];r.forEach(a=>{if(a.rel_period!==e&&a.cells[e]!==""){t.push(parseFloat(a.cells[e]))}});if(t.length>0){var a=r.find(t=>t.rel_period===e);if(a){var o=parseFloat(a.cells[e]);if(isNaN(o)||Math.abs(o-100)>.01){console.error(`Validation failed for ${e}: Self-intersection (${e}@${e}) must be 100%, got ${o||"undefined"}`);i=true}}}});if(i){s.error("Validation failed: Self-intersection of each populated period must be 100%.",{title:"Validation Error"});this._resetSaveState();return}var l=t.getData();var d=[];a.forEach(function(e){n.forEach(function(t){var a=e.cells[t];if(a!==""){d.push({orig_period:t,rel_period:e.rel_period,value:parseFloat(a)||0})}})});var h={frequency:l.frequency,project:{projectId:l.project.projectId},periods:d};console.log("Payload:",JSON.stringify(h,null,2));var c=this.getOwnerComponent().getModel("npvModel");if(!c){console.error("OData model not found.");s.error("Error: OData model not available",{title:"System Error"});this._resetSaveState();return}var u=c.bindList("/Configurations");var g=u.create(h);g.created().then(function(){o.show("New configuration saved successfully!");console.log("Create successful - new configuration created");this._createInitialSnapshot();this._resetSaveState()}.bind(this)).catch(function(e){console.error("Error saving data:",e);s.error("Failed to save configuration: "+(e.message||"Unknown error"),{title:"Save Error"});this._hasUnsavedChanges=true;this._resetSaveState()}.bind(this));c.submitBatch("updateGroup").then(function(){console.log("Batch submitted for creation")}).catch(function(e){console.error("Batch submission failed:",e);s.error("Failed to submit changes: "+(e.message||"Unknown error"),{title:"Submission Error"})})},_resetSaveState:function(){this._isSaving=false;this._updateSaveButtonState()},onProjectChange:function(e){var t=e.getParameter("selectedItem").getKey();this.getView().getModel("config").setProperty("/project/projectId",t);this._hasUnsavedChanges=true;this._updateSaveButtonState();this._loadDataFromBackend();this._createPeriodTable()},onExit:function(){if(this._hasUnsavedChanges){console.warn("User is leaving with unsaved changes")}}})});
//# sourceMappingURL=Configuration.controller.js.map