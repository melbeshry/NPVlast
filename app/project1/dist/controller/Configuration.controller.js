sap.ui.define(["sap/ui/core/mvc/Controller","sap/ui/model/json/JSONModel","sap/m/Column","sap/m/Text","sap/m/Input","sap/m/MessageToast"],function(e,t,a,o,n,r){"use strict";return e.extend("project1.controller.Configuration",{onInit:function(){var e=new t({frequency:"Annual"});this.getView().setModel(e,"config");var a={};a["First 4 Months"]=Array(20).fill().map(()=>({value:""}));for(var o=1;o<=20;o++){var n=o+"YP";a[n]=Array(20).fill().map(()=>({value:""}))}var r=new t(a);console.log("Initial Periods Model:",JSON.stringify(r.getData(),null,2));r.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);this.getView().setModel(r,"periods");var s=this.getOwnerComponent().getModel("npvModel");this._loadDataFromOData(s,e,r).then(()=>{this._createPeriodTable()}).catch(e=>{console.error("Failed to load data:",e)})},_createPeriodTable:function(){var e=this.byId("periodsTable");var t=this.getView().getModel("periods");var r=t.getData();e.removeAllColumns();e.unbindItems();var s=20;e.addColumn(new a({header:new o({text:"Period Name"})}));for(var i=1;i<=s;i++){e.addColumn(new a({header:new o({text:i+"YP"})}))}e.bindItems({path:"periods>/",factory:function(e,t){var a=t.getPath().split("/").pop();var r=[];r.push(new o({text:a}));for(var i=1;i<=s;i++){if(a==="First 4 Months"){var l=i-1;r.push(new n({value:"{periods>/"+a+"/"+l+"/value}",type:"Number",change:this._onInputChange.bind(this)}))}else{var u=parseInt(a.replace("YP",""),10);if(!isNaN(u)&&i>=u){var d=i-u;r.push(new n({value:"{periods>/"+a+"/"+d+"/value}",type:"Number",change:this._onInputChange.bind(this)}))}else{r.push(new o({text:""}))}}}return new sap.m.ColumnListItem({cells:r})}.bind(this)})},_onInputChange:function(e){var t=e.getSource();var a=t.getValue().trim();var o=t.getBinding("value").getPath();var n="/periods"+o;var s=this.getView().getModel("periods");console.log("Full Path:",n,"New Value:",a,"Current Model Value:",s.getProperty(n));if(a===""){return}var i=parseFloat(a);if(isNaN(i)||i<0||i>100){t.setValueState("Error");t.setValueStateText("Please enter a valid number between 0 and 100.");r.show("Please enter a valid number between 0 and 100.")}else{t.setValueState("None")}},_loadDataFromOData:function(e,t,a){if(!e){console.warn("OData model not found; skipping load");return Promise.resolve()}return e.bindList("/Configurations",undefined,undefined,undefined,{$expand:"periods($expand=percentages)"}).requestContexts().then(function(e){if(e.length>0){var o=e[0].getObject();t.setData({frequency:o.frequency,lastUpdatedBy:o.lastUpdatedBy||"Unknown"});var n=a.getData();var r={...n};if(o.periods){var s=o.periods.results||o.periods;s.forEach(function(e){var t=e.periodName;var a=e.percentages.results||e.percentages;r[t]=Array(20).fill().map((e,t)=>({value:a[t]&&a[t].value!=null?a[t].value.toString():""}))})}a.setData(r);console.log("Merged Periods Model:",JSON.stringify(r,null,2))}else{console.log("No Configurations found; using defaults.")}})},onSave:function(){var e=this.getView().getModel("periods");var t=this.getView().getModel("config");if(!e||!t){console.error("Required models not found.");return}var a=e.getData();for(var o in a){var n=0;a[o].forEach(function(e){var t=parseFloat(e.value)||0;n+=t});if(n>100){r.show(`Total for ${o} exceeds 100% (${n.toFixed(2)}%). Please correct.`);return}}var s=t.getData();var i=Object.keys(a).map(function(e){return{periodName:e,percentages:a[e].map(function(e,t){return{index:t,value:parseFloat(e.value)||0}})}});var l={frequency:s.frequency,periods:i};console.log("Payload:",JSON.stringify(l,null,2));var u=this.getOwnerComponent().getModel("npvModel");if(!u){console.error("OData model not found.");r.show("Error: OData model not available");return}u.bindList("/Configurations").requestContexts().then(function(e){if(e.length>0){var t=e[0];var a=t.getObject().ID;var o=u.bindContext(`/Configurations(${a})`);o.requestObject().then(function(e){o.getBoundContext().setProperty("frequency",l.frequency);var t=u.bindList(`/Configurations(${a})/periods`);t.requestContexts().then(function(e){e.forEach(function(e){e.delete()});l.periods.forEach(function(e){t.create({periodName:e.periodName,percentages:e.percentages})});u.submitBatch("updateGroup").then(function(){r.show("Data updated successfully!");console.log("Update successful")}).catch(function(e){console.error("Error updating data:",e);r.show("Failed to update data: "+e.message)})}).catch(function(e){console.error("Error managing periods:",e);r.show("Failed to manage periods: "+e.message)})}).catch(function(e){console.error("Error fetching entity data:",e);r.show("Failed to fetch entity data: "+e.message)})}else{u.bindList("/Configurations").create(l,{success:function(){r.show("Data saved successfully!");console.log("Create successful")},error:function(e){console.error("Error saving data:",e);r.show("Failed to save data: "+e.message)}});u.submitBatch("updateGroup").then(function(){console.log("Batch submitted for creation")}).catch(function(e){console.error("Batch submission failed:",e);r.show("Failed to submit batch: "+e.message)})}}).catch(function(e){console.error("Error checking existing configurations:",e);r.show("Error accessing service: "+e.message)})}})});
//# sourceMappingURL=Configuration.controller.js.map